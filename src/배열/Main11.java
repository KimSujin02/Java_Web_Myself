package 배열;
import java.util.Scanner;

/*
 * 배열 예재소스
 * 배열 : 같은 자료형의 데이터를 여러개 저장할 수 있는 저장공간
 * 배열변수 선언 : 자료형[] 변수형; 자료형 변수명[];
 * 배열 공간 할당: 배열변수 = new 자료형[배열크기];
 * 단, 배열의 인덱스 번호는 0번부터 시작된다.
 * 생성된 배열공간은 독립적인 데이터를 저장할 수 있음
 * 배열공간을 접근하는 법 : 배열변수[인덱스 번호][
 * 인덱스 번호의 범위 : 0~배열크기-1, 인덱스 범위를 벗어나게되면 에러가 발생한다.
 * 배열용도 : 반복문을 환용해 반복적인 값 조회, 설정을 해야되는 경우에 사용한다.
 * 예) 학생들의 성적 평균값 구하기, 입금/송금 대상의 계좌번호가 존재하는지 확인(검색)
 * 권장하는 용도 : 배열의 크기가 자주 변경되지않는 상황에서만 사용하는 것이 바람직하다.
 */

public class Main11 {
	public static void main(String[] args) {
		//기본적인 배열생성 - 크기가 고정인 배열생성
		int[] a = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; //배열 변수 선언과 동시에 각 요소에 들어갈 값을 설정한다.
		//데이터접근, 데이터 수정
		a[0] = 5;//기존의 0번인덱스의 1은 삭제하고 5를 저장한다.
		a[1] = a[0] + a[2];
		//배열에 모든 인덱스에 접근할 때는 반복문을 이용한다.
		int sum = 0;//합을 저장하는 변수
		//a.length : 배열 인덱스의 개수크기 / 배열크기가 바뀌더라도 유동적으로 반복문 횟수를 조절할 수 있음
		for(int i = 0; i<a.length; i++){//반복문에 사용하는 변수를 활용해 인덱스를 규칙적으로 접근한다
			sum = sum + a[i];
			System.out.println("a의 " + i + "번째 인덱스의 값 : " + sum);
		}
		System.out.println("a배열 요소의 합 : " + sum);
		
		
		
		
		//사용자가 n명의 학생 성적의 평균을 얻는 프로그램
		//배열의 크기를 프로그램이 동작하는 중에 변경해 사용
		Scanner sc = new Scanner(System.in);
		
		int[] arr;//학생 성적 저장 배열 변수
		int n;//학생수 저장 변수
		System.out.print("입력할 학생의 수 : ");
		n = sc.nextInt();
		arr = new int [n]; //사용자가 입력한 정수만큼 배열 요소를 생성
		for(int i = 0; i<n; i++) {
			//사용자가 입력한 정수값을 1번째 인덱스에 저장
			System.out.print((arr[i] +1) + "번 학생의 성적 : ");
			arr[i] = sc.nextInt();
		}
		//입력받을 성적의 합을 구하는 반복문
		/*
		 * for-each문 :조건식이 do-while,while,기존의 for와는 다르게
		 * 요소들을 저장하는 변수의 모든 요소를 접근하는 반복문
		 * 예) arr변수에 모든 요소에 접근해서 합을 연산하려고 할 때. for-each문을 활용해서 요소의 데이터를
		 * 순차적으로 추출해 반복문 안에서 활용한다.
		 * 파이썬에서는 for와 비슷하거, c#에서는 for-each문과 비슷하다.
		 */
		
		//해당 배열의 모든 요소를 방문할 때 까지 반복을 하면서 i변수에 각 인덱스에 저장된 값을 대입한다.
		//for-each문을 사용할때 for-each문 안에서
		//접근하는 배열변수의 사이즈가 변경되면 프로그램이 멈춤
		sum=0;
		for(int i : arr) { //  for(요소의 자료형 변수명 : 배열변수이름){}
			sum += i;
		}
		System.out.println("학생 성적의 평균 : " + (sum/arr.length));
		
		
	}
}
