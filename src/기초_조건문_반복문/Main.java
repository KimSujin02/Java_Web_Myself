package 기초_조건문_반복문;

public class Main {
	
	//주석 : 프로그램 설명을 할 수 있는 공간이다
	
	/*
	 * 자료형과 변수 형성
	 * 변수 : 프로그램이 동작하면서 임시로 할당받은 저장 공간?
	 * 프로그램이 종료되면 변수는 사라진다. (사용할 수 없다 이말임)
	 * 
	 * <메모장>
	 * 내일 준비물은 내 마우스..( 여기 컴퓨터 마우스는 스크롤이 안된다.)
	 * 그리고 밥..
	 * 그리고 선풍기
	 * 그리고 마실것
	 * 
	 */

	public static void main(String[] args) { //프로그램이 시작될때 가장 먼저 실행 되는 코드저장 공간
		
		System.out.println();
		System.out.println(" 내 개인 테스트임.. ");
		System.out.println();

		for(int i=2; i<10; i++) {
			System.out.println("------" + i + "단" + "------");
			for(int j=1; j<10; j++) {
				System.out.println(i + "x" + j + "=" + i*j);
			}
		}
		System.out.println();
		System.out.println("구구단 완료");
		System.out.println();
		
		
		
		System.out.println("-------------------------여기 부터 실습-----------------------------");
		System.out.println();
		
		
		
		//변수선언 : 앞으로 사용할 변수를 생성하는 것
		//변수선언 방식 : 값의 종류 변수이름;
		
		int a; //소수점이 없는 숫자를 저장할 수 있는 변수 a를 생성한다는 말임
		a=100; //변수 a에 100을 저장한다.
		
		
		//화면에 변수값을 출력 ↓ 하는 함수이다.
		System.out.println();
		//함수 : 수학 f(x) 와 같이 특정 기능이 구현되어 있어, 결과값을 반환하는 단위이다.
		
		
		System.out.println("Hello World!");
		System.out.println("a 변수 값 : " + a);
		
		//run을 하는 것은 자바파일을 실행하는 것이 아닌 클래스 파일(javac.exe)파일을 실행하는 것이라고 함....
		
		
		
		//정수를 저장할 수 있는 result변수 생성 및 값 초기화
		//result 변수에 a/2의 결과값을 저장하면서 변수 생성
		int result = a/2;
		//숫자값을  저장하는 변수 (int, long, byte, short 타입)은 사칙연산과 나머지 연산을 할 수 있음
		// + - * / %       ++ --  ←저것은 증감 연산자라고 함.
		System.out.println("result 값 : " + result);
		//증감 연산자(++ --) :  기존의 변수가 저장한 값에 +1을 하거나 -1을 한 값을 저장하는 연산자이다
		result++; //result가 가지고 있는 값에 +1을 한다는 뜻이다.
		//result = result + 1 ; 의 식과 동일하다
		System.out.println("10/3 = " + 10/3);//3.333333.... 이렇게 나와야 하는데.. 왜 3으로만 출력되냐??? 이유 : 왼쪽에 있는(10)도 정수값이고 (소수점이 없음) 3도 정수값이라서 값은 무조건 정수가 나온다.
		//그렇다면 우리가 바란대로 소수점이 나오게끔 연산을 해보자
		System.out.println("10.0/3.0 = " + 10.0/3.0);
		//따라서 실수/실수 하면 값은 실수이다. 10.0은 Double자료형이다. 따라서 실수형 자료형으로 출력된다 이말이야ㅑ
		//정수/정수하면 식에 따라서 값이 정수로 나오는 것이다. 이말이다
		
		
		//그렇다면 정수/실수하면 어떻게 될까
		System.out.println("10/3.0 = " + 10/3.0);
		//결과 값은 실수/실수로 연산 한거 처럼 실수형으로 나온다.
		//명시적 타입 변환 : 해당 수식에서 기존의 자료형이 아닌 다른 자료형으로 변경해 연산에 사용하는 기법이다.
		int q = 100; //정수 100을 저장한 q 변수 생성
		int w = 45;
		float r;
		r = q / w; // 식은 정수/정수 인데...  그 결과값을 float 자료형으로 넣겠다. 이말은 실수형으로 저장했기 때문에 실수형으로 결과값이 출력된다. 컴파일러가 묵시적으로 자료형을 바꿔서 저장해준다
		//int 값을 float자료형으로 변환 한 것이므로 소수점이 제거가 된 상태로 float로 변환.... 
		//자세히 말 하자면 q/w의 결과값은 2이다. 근데 그것을 그대로 float로 변환되는 것이기 때문에 2.0으로 변환 된다.
		System.out.println("정수/정수로 계산하고 실수형 자료형에 값을 넣은 r : " + r);
		
		//따라서 실수로 (2.5)로 출력하고 싶다면 실수/정수로 바꿔야한다. 아래의 식이 그 예이다
		
		r = (float)q / w;
		System.out.println("실수/정수로 계산하고 실수형 자료형에 값을 넣은 r : " + r);
		
		
		//정리
		//정수/정수 => 정수형 결과값
		//실수/실수 => 실수형 결과값
		//정수/실수 => 실수형 결과값**
		
		
		
		//이제 문자형 자료형을 알아보자...
		//char는 아스키 코드가 적용된다.(알파벳이나 기호등등) 한글은 유니코드로 적용되는 형식이다.
		//''는 한글자만
		//""는 여러 글자가 가능하다 이말임
		
		
		
		//char : 문자 1개를 저장할 수 있는 자료형이다. ' '
		//String : 문자열을 저장할 수 있는 저장공간이다. " "
		//char 자료형은 저장하는 문자에 대응하는 숫자값을 변수에 저장해 출력해줄때
		//해당 숫자값을 문자로 변경해서 출력 예) 'a' 저장 -> 97값 저장
		//문자열 + 다른 자료형 -> 문자열. 문자열과 다른 자료형 값을 합치는 연상결과를 얻음
		//예) "Hello World! " + 150 -> "Hello World! 150"으로 출력된다.
		
		char c ;
		c = '뿡'; //한글을 저장할때는 유니코드 형태로 저장한다. 영어로 저장할때는 아스키코드 형태로 저장한다.
		System.out.println("c : " + c);
		
		
		String str;
		//문자열을 저장하는 변수인 str을 생성한당
		str = "안녕 클레오 파트라\n세상에서 제일가는 포테이토 칩!";		//\t는 tap의 기능(4번 띄어쓰기) \n은 줄바꿈(엔터)
		
		//그래서 다양한 정보를 저장할때 String을 쓴다 이말이야
		//그리고 당연히 문자열은 연산자(+ - /)를 쓸수없다.
		
		System.out.println("str : \n" + str);
		
		
		
		//boolean : 참과 거짓 오직 두개의 종류만 저장할 수 있는 자료형
		//관계 연산자를 사용할 수 있음 ( < > >= <= == != )
		//관계연산자가 참이면 true 거짓이면 false를 연산한다. 산술연산이 먼저 수행됨
		//연산자 우선순위 : 산술연산(*/%+-) -> 관계연산(> < >= <= == !=)
		boolean isTrue; //참이나 거짓을 저장할 수 있는 변수 생성
		isTrue = true; //false
		System.out.println("블린 값 : " + isTrue);
		//a변수에 저장된 값이 result 변수에 저장된 값보다 크면 참, 작으면 거짓값을 isTrue에 저장
		isTrue = a>result;
		
		
		
		//논리 연산자 : 관계연산자들을 묶을 때 사용하는 연산자
		//And(&&), Or(||), Not(!)이라는 매우 컴구때 배운 연산자.......
		//관계식 && 관계식 : 두 관계식이 모두 참인 경우만 참 둘다면...이라는 뜻이다. and니까
		//관계식 || 관계식 : 두 관계식이 모두 거짓일때만 거짓이 된다. 그렇다는 것은 둘 중에 하나만 이라도 참이면 참이 연산된다는 말이겠지요..? 둘중에 하나면.. 이라는 뜻이다. or니까
		//!관계식 : 관계식결과가 참이면 -> 거짓, 거짓이면 -> 참으로 변환하는 청개구리 같은 연산자라고 함...
		//현금이 5천원 이상이거나 카드를 가지고 있는가?
		int money = 1000;
		boolean card = true;
		isTrue = money >= 5000 || card == true; //money가 5000원 이상이거나 card의 값이 true이면 참을 출력한다.
		//앞의 식은 false지만 뒤의 식은 true이기 떄문에 or연산자로 인해 참이 출력된다.
		//연산자 우선순위 : 산술연산 -> 관계연산-> 논리연산
		System.out.println("택시를 탈 수 있는가? : " + isTrue);
		
		
	}

}
